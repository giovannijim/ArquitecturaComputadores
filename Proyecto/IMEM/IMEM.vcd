$date
	Sun Oct 12 20:56:12 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module testbench $end
$var wire 32 ! instruction [31:0] $end
$var reg 32 " addr [31:0] $end
$var reg 6 # funct [5:0] $end
$var reg 16 $ imm [15:0] $end
$var reg 6 % opcode [5:0] $end
$var reg 5 & rd [4:0] $end
$var reg 5 ' rs [4:0] $end
$var reg 5 ( rt [4:0] $end
$var reg 5 ) shamt [4:0] $end
$var integer 32 * i [31:0] $end
$scope module dut $end
$var wire 32 + addr [31:0] $end
$var wire 32 , instruction [31:0] $end
$upscope $end
$scope task decode_and_print $end
$var reg 32 - a [31:0] $end
$var reg 32 . instr [31:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
$end
#0
$dumpvars
bx .
bx -
b1000100001100000100000 ,
b0 +
b0 *
bx )
bx (
bx '
bx &
bx %
bx $
bx #
b0 "
b1000100001100000100000 !
$end
#1000
b100001000010010000000000001010 !
b100001000010010000000000001010 ,
b1 "
b1 +
b1 *
b1100000100000 $
b100000 #
b0 )
b11 &
b10 (
b1 '
b0 %
b0 -
b1000100001100000100000 .
#2000
b11001000010100000100100 !
b11001000010100000100100 ,
b10 "
b10 +
b10 *
b1010 $
b1010 #
b0 &
b1001 (
b1000 '
b1000 %
b1 -
b100001000010010000000000001010 .
#3000
b11001000011000000100101 !
b11001000011000000100101 ,
b11 "
b11 +
b11 *
b10100000100100 $
b100100 #
b101 &
b100 (
b11 '
b0 %
b10 -
b11001000010100000100100 .
#4000
b1000100011100000101010 !
b1000100011100000101010 ,
b100 "
b100 +
b100 *
b11000000100101 $
b100101 #
b110 &
b11 -
b11001000011000000100101 .
#5000
b10001101001010100000000000000100 !
b10001101001010100000000000000100 ,
b101 "
b101 +
b101 *
b11100000101010 $
b101010 #
b111 &
b10 (
b1 '
b100 -
b1000100011100000101010 .
#6000
b10101101001010100000000000001000 !
b10101101001010100000000000001000 ,
b110 "
b110 +
b110 *
b100 $
b100 #
b0 &
b1010 (
b1001 '
b100011 %
b101 -
b10001101001010100000000000000100 .
#7000
b10000001000100000000000000011 !
b10000001000100000000000000011 ,
b111 "
b111 +
b111 *
b1000 $
b1000 #
b101011 %
b110 -
b10101101001010100000000000001000 .
#8000
b100000000010000000000011111111 !
b100000000010000000000011111111 ,
b1000 "
b1000 +
b1000 *
b11 $
b11 #
b10 (
b1 '
b100 %
b111 -
b10000001000100000000000000011 .
#9000
b110101000010110000000010101010 !
b110101000010110000000010101010 ,
b1001 "
b1001 +
b1001 *
b11111111 $
b111111 #
b11 )
b1000 (
b0 '
b1000 %
b1000 -
b100000000010000000000011111111 .
#10000
b0 !
b0 ,
b1010 "
b1010 +
b1010 *
b10101010 $
b101010 #
b10 )
b1011 (
b1000 '
b1101 %
b1001 -
b110101000010110000000010101010 .
#11000
b1011 "
b1011 +
b1011 *
b0 $
b0 #
b0 )
b0 (
b0 '
b0 %
b1010 -
b0 .
#12000
b1100 "
b1100 +
b1100 *
b1011 -
#13000
b1101 "
b1101 +
b1101 *
b1100 -
#14000
b1110 "
b1110 +
b1110 *
b1101 -
#15000
b1111 "
b1111 +
b1111 *
b1110 -
#16000
b10000 *
b1111 -
